				 Routing
....................................................................................

Routing is a concept through which we can build an app called Single Page Web App.

We have lot of web apps

1.static web app
2.dynamic web app
3.web services - soap,restfull
4.spa

SPA core concepts:

spa is built using "js,css,html5"

js offers browser apis
-location
-history
 objects are used to implement navigation

if you want to build spa using frameworks like angular , angular offers a separate module called "RouterModule"

1.page
  1.physical page - html page/static - index.html
  2.virtual page - the page created onfly and inserted into pysical page- 

components/views

index.html

 <body>
    <app-root></app-root>
 </body>


without spa

 <body>
    <app-root>
		<app-users>
    </app-root>
 </body>



with spa

 <body>
    <app-root>
         <navigation>
         <page>
    </app-root>
 </body>

navigation would html hyper links - menus
page is component to be rendered based on menuitem
.....................................................................................

Steps:

1.RouterModule:
 
Routing Design:

1.Global /Application Level Routing
  appRouting
2.Module Level Routing


app.routing.module.ts

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

//routing rules: routing configuration/
//when i click particular menu, which compoent should be displayed
const routes: Routes = [];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

....................................................................................
Common Objects In the Routing Module/Routing:

1.RouterModule
  To define route configuration

Directives:
2.RouterOutlet 
	Acts as a placeholder that Angular dynamically fills based on the current router state.
   <router-outlet>

3.RouterLink And RouterLinkActive
   RouterLink is directive to replace href .

Flow of App:

Modules:

routingapp>ng g m home --module=app
CREATE src/app/home/home.module.ts (190 bytes)
UPDATE src/app/app.module.ts (458 bytes)

E:\session\IBM\2022\sep\ng-session\routingapp>ng g m contact --module=app
CREATE src/app/contact/contact.module.ts (193 bytes)
UPDATE src/app/app.module.ts (535 bytes)

Components:
E:\session\IBM\2022\sep\ng-session\routingapp>ng g c home/home --flat --inline-style --export  --module=home --skip-tests
CREATE src/app/home/home.component.html (19 bytes)
CREATE src/app/home/home.component.ts (245 bytes)
UPDATE src/app/home/home.module.ts (297 bytes)

E:\session\IBM\2022\sep\ng-session\routingapp>ng g c contact/contact --flat --inline-style --export  --module=contact --skip-tests
CREATE src/app/contact/contact.component.html (22 bytes)
CREATE src/app/contact/contact.component.ts (254 bytes)
UPDATE src/app/contact/contact.module.ts (312 bytes) 


Rendering:
<div class="container">
    <h1 class="text-center">Routing App</h1>
    <hr>
    <app-home></app-home>
    <app-contact></app-contact>
 
</div>
..................................................................................
			  How to display view based on navigation.


Routing Configuration:
 -AppModule level
 -SubModule level


app.routing.module.ts

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ContactComponent } from './contact/contact.component';
import { HomeComponent } from './home/home.component';

//routing rules: routing configuration/
//when i click particular menu, which compoent should be displayed
const routes: Routes = [
  {
    path: '', component: HomeComponent
  },
  {
    path: 'contact', component: ContactComponent
  }

];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

........................................................................

More Menu Configuration:
<div class="container">
    <h1 class="text-center">Routing App</h1>
    <hr>
    <!-- Traditionally displayed -->
    <!-- <app-home></app-home>
    <app-contact></app-contact> -->
    <!-- With routing -->
    <nav>
        <ul>
            <li><a routerLinkActive="active" routerLink="contact">Contact</a></li>
            <li><a routerLinkActive="active" routerLink="users">Users</a></li>
        </ul>
    </nav>
    <hr>
    <router-outlet></router-outlet>

</div>
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ContactComponent } from './contact/contact.component';
import { HomeComponent } from './home/home.component';
import { UserlistComponent } from './users/userlist.component';

//routing rules: routing configuration/
//when i click particular menu, which compoent should be displayed
const routes: Routes = [
  {
    path: '', component: HomeComponent
  },
  {
    path: 'contact', component: ContactComponent
  },
  {
    path: 'users', component: UserlistComponent
  }

];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
....................................................................................
			  Page Not Found - 404
..................................................................................
E:\session\IBM\2022\sep\ng-session\routingapp>ng g c pagenotfound --flat --inline-style --export  --module=app --skip-tests
CREATE src/app/pagenotfound.component.html (27 bytes)
CREATE src/app/pagenotfound.component.ts (269 bytes)
UPDATE src/app/app.module.ts (741 bytes)


 {
    path: '**', component: PagenotfoundComponent
  }
....................................................................................
			Redirection
...................................................................................

For multi url pattern we can map single component

eg/
 Component: MyComponent

/foo - MyComponent
/bar->MyComponent
/ -->MyComponent

{path: 'mycmp' component:MyComponent}

{path :'/foo' redirect:'/mycmp' pathMatch:'full'}


const routes: Routes = [
  {
    path: 'home', component: HomeComponent
  },
  {
    path: 'contact', component: ContactComponent
  },
  {
    path: 'users', component: UserlistComponent
  },
  {
    path: '', redirectTo: '/home', pathMatch: 'full'
  },
  {
    path: 'yourhome', redirectTo: '/home', pathMatch: 'full'
  },
  {
    path: '**', component: PagenotfoundComponent
  }

];
/////////////////////////////////////////////////////////////////////////////////////
			    Dynamic router
....................................................................................

/users/1

  {
    path: 'users/:id', component: UserlistComponent
  },

http://localhost:4200/users/12

E:\session\IBM\2022\sep\ng-session\routingapp>ng g c users/user --flat --inline-style --export  --module=users --skip-tests
CREATE src/app/users/user.component.html (19 bytes)
CREATE src/app/users/user.component.ts (245 bytes)
UPDATE src/app/users/users.module.ts (402 bytes)

How to read routeParam inside component?

ActivatedRoute:
 It is built in service object , used to get information about current route inside component.
This Object powered with Observable.


http://localhost:4200/users/89

eg;

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';

@Component({
  selector: 'app-user',
  templateUrl: './user.component.html',
  styles: [
  ]
})
export class UserComponent implements OnInit {

  id!: string
  constructor(private route: ActivatedRoute) { }

  ngOnInit(): void {
    this.route.params.subscribe({
      next: params => {
        console.log(params['id'])
        this.id = params['id']
      }
    })
  }

}
....................................................................................
				SubMenu

/product/books

Product
  -Books
  -Electronics

Books details

/product/electronics

 Books details

Nested Routing:
..............

ng g m products --module=app
ng g c products/products --flat --inline-style --export  --module=products --skip-tests
>ng g c products/books --flat --inline-style --export  --module=products --skip-tests
ng g c products/Electronics --flat --inline-style --export  --module=products --skip-tests

AppComponent:
<div class="container">
    <h1 class="text-center">Routing App</h1>
    <nav>
        <ul>
            <li><a routerLinkActive="active" routerLink="home">Home</a></li>
            <li><a routerLinkActive="active" routerLink="contact">Contact</a></li>
            <li><a routerLinkActive="active" routerLink="users">Users</a></li>
            <li><a routerLinkActive="active" routerLink="products">Products</a></li>

        </ul>
    </nav>
    <hr>
    <router-outlet></router-outlet>

</div>
app.routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { BooksComponent } from './products/books.component';
import { ElectronicsComponent } from './products/electronics.component';
import { ProductsComponent } from './products/products.component';

//routing rules: routing configuration/
//when i click particular menu, which compoent should be displayed
const routes: Routes = [
  {
    path: 'products', component: ProductsComponent,
    children: [
      { path: 'books', component: BooksComponent },
      { path: 'electronics', component: ElectronicsComponent }
    ]
  },
  
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

Products Component:
<div>
    <h1>Products</h1>
    <ul>
        <li>
            <a routerLinkActive="active" routerLink="/products/books">Books</a>
        </li>
        <li>
            <a routerLinkActive="active" routerLink="/products/electronics">Electronics</a>

        </li>
    </ul>
    <router-outlet></router-outlet>
</div>

....
Path syntax:

 Absoute Path
  <a routerLinkActive="active" routerLink="/products/books">Books</a>

 Relative Path

 <a routerLinkActive="active" routerLink="./electronics">Electronics</a>
.....................................................................................
			 Routing Patterns


1.via url 
http://localhost:4200/products/electronics
2.via hyper links in the template
 <li><a routerLinkActive="active" routerLink="home">Home</a></li>
 <li><a routerLinkActive="active" routerLink="contact">Contact</a></li>
3.Programmetic Routing
.....................................................................................
				Programmetic Routing

Via code you can implement.

Router Object:
 It is built in object used to navigate to Other Routers


import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styles: [
  ]
})
export class DashboardComponent implements OnInit {

  constructor(private router: Router) { }

  ngOnInit(): void {
  }
  gotToUsers() {
    this.router.navigate(['users'])
  }
  goToProducts() {
    this.router.navigate(['products'])
  }

}
.....................................................................................
				Modularizing Routing
				  (Lazy Loading)

.....................................................................................

How to create a submodule with sub routing module?

ng g m customers --route customers  --module=app

CREATE src/app/customers/customers-routing.module.ts (355 bytes)
CREATE src/app/customers/customers.module.ts (378 bytes)
CREATE src/app/customers/customers.component.html (24 bytes)
CREATE src/app/customers/customers.component.spec.ts (620 bytes)
CREATE src/app/customers/customers.component.ts (287 bytes)
CREATE src/app/customers/customers.component.css (0 bytes)
UPDATE src/app/app-routing.module.ts (1707 bytes)          

ng g m orders --route orders  --module app.module
CREATE src/app/orders/orders-routing.module.ts (343 bytes)
CREATE src/app/orders/orders.module.ts (357 bytes)
CREATE src/app/orders/orders.component.html (21 bytes)
CREATE src/app/orders/orders.component.spec.ts (599 bytes)
CREATE src/app/orders/orders.component.ts (275 bytes)
CREATE src/app/orders/orders.component.css (0 bytes)
UPDATE src/app/app-routing.module.ts (1809 bytes)

app.routing.module
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { ContactComponent } from './contact/contact.component';
import { DashboardComponent } from './dashboard.component';
import { HomeComponent } from './home/home.component';
import { PagenotfoundComponent } from './pagenotfound.component';
import { BooksComponent } from './products/books.component';
import { ElectronicsComponent } from './products/electronics.component';
import { ProductsComponent } from './products/products.component';
import { UserComponent } from './users/user.component';
import { UserlistComponent } from './users/userlist.component';

//routing rules: routing configuration/
//when i click particular menu, which compoent should be displayed
const routes: Routes = [
  {
    path: 'home', component: HomeComponent
  },
  {
    path: 'contact', component: ContactComponent
  },
  {
    path: 'users', component: UserlistComponent
  },
  {
    path: 'users/:id', component: UserComponent
  },
  {
    path: 'dashboard', component: DashboardComponent
  },
  {
    path: 'products', component: ProductsComponent,
    children: [
      { path: 'books', component: BooksComponent },
      { path: 'electronics', component: ElectronicsComponent }
    ]
  },
  {
    path: 'yourhome', redirectTo: '/home', pathMatch: 'full'
  },
  { path: 'customers', loadChildren: () => import('./customers/customers.module').then(m => m.CustomersModule) },
  {
    path: '', redirectTo: '/home', pathMatch: 'full'
  },
  { path: 'orders', loadChildren: () => import('./orders/orders.module').then(m => m.OrdersModule) },
  {
    path: '**', component: PagenotfoundComponent
  }

];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

customers module
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { CustomersRoutingModule } from './customers-routing.module';
import { CustomersComponent } from './customers.component';


@NgModule({
  declarations: [
    CustomersComponent
  ],
  imports: [
    CommonModule,
    CustomersRoutingModule
  ]
})
export class CustomersModule { }

Orders:
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { OrdersRoutingModule } from './orders-routing.module';
import { OrdersComponent } from './orders.component';


@NgModule({
  declarations: [
    OrdersComponent
  ],
  imports: [
    CommonModule,
    OrdersRoutingModule
  ]
})
export class OrdersModule { }

app.component.html
<div class="container">
    <h1 class="text-center">Routing App</h1>
    <hr>
    <!-- Traditionally displayed -->
    <!-- <app-home></app-home>
    <app-contact></app-contact> -->
    <!-- With routing -->
    <nav>
        <ul>
            <li><a routerLinkActive="active" routerLink="home">Home</a></li>
            <li><a routerLinkActive="active" routerLink="contact">Contact</a></li>
            <li><a routerLinkActive="active" routerLink="users">Users</a></li>
            <li><a routerLinkActive="active" routerLink="products">Products</a></li>
            <li><a routerLinkActive="active" routerLink="customers">Customers</a></li>
            <li><a routerLinkActive="active" routerLink="orders">Orders</a></li>
            <li><a routerLinkActive="active" routerLink="dashboard">Dashboard</a></li>

        </ul>
    </nav>
    <hr>
    <router-outlet></router-outlet>

</div>
.....................................................................................
What is lazy loading?

  In Angular the whole app is bundled as single js file (bundle.js).

if your app grows big, the bundle also going to be big. when you load your app firt time in browser, it loads all js files which even not necessary the momement you launch app.

it want to spilt the bundle.js file into menu driven 
  products related js  is a separate bundle , which is requested from the server when i click product menu first time, it starts caching the local browser.

Test Lazy Loading is working or not?

Open browser , check network tab.
......................................................................................













