				Angular 
....................................................................................

How HTML is rendered inside WebBrowser?
What is internal representation of HTML?

HTML:

1.HTML IS PL? - YES
2.HTML Is compiled -YES
3.HTML is excuted-YES

index.html -source code

<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>

-------------------Browser
loader---LOAD Code into browser
 |
   from file: or http:
 |
Parser : Parser is special compiler which converts source into lexical tree(string tree)
 |
body
  div
     h1
        Welcome 
     h1
  div
body
|
 Complier-Compilation : Convert this into assembly
|
body -load xxx
  div
     h1
        Welcome 
     h1
  div
body
|
-------------------------Execution cycle------------------------------------
HTML Execution engine : Request Os ,to allocate memory :Runtime

-Linked List

body -Node
  div -Node
     h1 -Node
        Welcome -Node
     h1
  div
body

 Linking the Nodes: Tree
body  -Node
  |
  div -Node
    |
     h1 -Node
      |
        Welcome -Node
        |
     h1
  div
body
...
|
|
|
Layout/Paint Engine: will convert nodes into pxs : final output

.....................................................................................
			Dynamic HTML - Inside Web Browser
.....................................................................................

Once the html has been rendered by the web browser, can we change the html(adding new element,updating existing element content,removing node,listing nodes).

The company called Netscap communcation, the second web browser creator after line mode web browser.

The NetsCap communication introduced the browser called netscap navigator , today firefox.

The netscap introduced a new technology called how to change html after rendering.

In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

                        "The birth of Javascript"

How to access nodes from javascript engine?
  


One spec was published ,As per that spec
 "Document Object Model"
    -How to represent document(elements/nodes) in object oriented way.->DOM

 "Documents can be reprsented as Objects" : Object oriented Document Programming.

DOM is published by W3C in order to standarized the  DOM programming across the browsers

............................................................................................
How dom works?

index.html           Broser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                 Every Html ELEMENT Inside Browser is "C Program"

	       Every Html ELEMENT javascript engine is "Object"


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.	*******************************************************************************************	

Who and when "H1" object is created?

if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()


<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?



if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()

<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?

Note: For html elements, we cant create object directly, rather than JS Engine will create objects , return references to the developer to access.

How via factory Objects: object helps to get other documents

Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.


What is our objective here? DOM Programming?


Enter into DOM programming:

1.write dom programming using javascript language.

<body>
  |
HTMLDocument : body : factory Object


Document apis:

Finding HTML Elements:
......................

HTMLElement document.getElementById(id)	       Find an element by element id
HTMLElement Document document.getElementsByTagName(name)	Find elements by tag name
HTMLElement document.getElementsByClassName(name)	Find elements by class name
HTMLElement document.querySelectory(selector)        find element/elements by selector


Changing HTML Elements : update existing element
......................
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements:


document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element



How to implement dom programming?

1.using plain js
  if we use plain js , it is very difficult to build large applications

2.using frameworks and libs

2000 - The first javascript framework - DOJO
2002-2005 - JQuery - is the second most powerfull dom lib.
After 2006 - many js libs and frameworks introduced.....

Angular js - 2007
React - 2013 
Vue js
Polymer
Angular 2
...................................................................................
				 HTML elements


HTML Elements types

1.built in elements

2.custom elements



1.built in elements
  are part of html language spec
 h1,body,p,nav,div

compiler design

 source code
                              compiler db -[div]
                                 |
  <div></div> ----- compile----compiler
                                  |
                      ------------------------
                    if present             
                      |
                    execution
                      |
                     node
                       |
                     screen


                                compiler db -[Subramanian]
                                    |
  <subramanian></subramaian> ----- compile----compiler
                                  |
                      ------------------------
                    if present            if not present           
                      |                        |
                    execution              throw error - UnKnown Element
                      |                                 |
                     node                              Convert that element into 							PlanText   
                       |                               |
                     screen                           render



2.IN 2007-2008 W3C Decided to introduce new html spec - html 5

 -custom elements - how to add new elements
 -custom attributes - how to add custom attribues on existing html specs

Custom Types
int,float =  class A{ int,float }

how to teach browser to understand custom elements and attributes
   -via Javascript


                             compiler db -[Subramanian]
                                    |
 <subramanian></subramaian> ----- compile----compiler
                                  |
                      ------------------------
                    if present            if not present           
                      |                        |
                    execution              feed into js 
                      |                                 |
                     node                              js will do something   
                       |                               |
                     screen                           render



eg:

class AppDrawer extends HTMLElement {...}

window.customElements.define('app-drawer', AppDrawer);

// Or use an anonymous class if you don't want a named constructor in current scope.
window.customElements.define('app-drawer', class extends HTMLElement {...});



  			              compiler db -[div,Subramanian]
                                           |
<subramanian></subramaian> --jsengine will add new defintion--- compile----compiler
                                   |
                      ------------------------
                    if present            if not present           
                      |                        |
                    execution              throw error - UnKnown Element
                      |                                 |
                     node                              Convert that element into PlanText   
                       |                               |
                     screen                           render

////////////////////////////////////////////////////////////////////////////////////////////
Angular and Custom Elements:

 Angular follows custom element spec in order to create apps.


  Custom Element
  <app-root></app-root>
                  |
                  ------------->|import { Component } from '@angular/core';

				@Component({
 				 selector: 'app-root',
  				templateUrl: './app.component.html',
  				styleUrls: ['./app.component.css']
				})
				export class AppComponent {
					  title = 'ng-helloworld';
				}


<app-root></app-root> ---------------function AppComponent(){ 
                                           //dom code
                                     }


/////////////////////////////////////////////////////////////////////////////////////
				How to start angular
.....................................................................................

Steps:

1.npm install -g @angular/cli

2.ng new gettingstarted

3.cd gettingstarted

4.ng server or npm start
..................................................................................

Exploring Project files and folders

folders
 -e2e
    end to end testing information - e2e framework is protractor.
 -node_modules
    all angular libs @angular @somethiing

 -src
    Application code will go here

files
 package.json - project information like dep,scripts
 
ts config -files
  -ts.config - core configuration
  -tsconfig.app.json - app specific compiler conf
  -tsconfig.spec.json  -testing related compiler conf

tslint.json 
   config information for tslint tool.
   static code analysis using tslint tool


angular.json.
  angular project automated by webpack,but we cant see any webpack.config.js file.
 angular.json file is proxy file for webpack.

 -app related configuration
  
karma.config.json
    Unit testing configuration files


App folder structure

 src
  |
  app
    -will have basic application code
  assets
  env
 index.html
 main.ts - entry file for app
 polyfills.ts - browser specific libs
 styles.css - global css
 test.ts - basic unit testing file


Angular Work Flow:

eg:
  http://www.example.com ------index.html

Flow of Angular:

1.index.html
    browser will try to construct inital tree,JS engine initalize the DOM Tree---->Angular Engine will kick start --> will initalize the App.

2.browser loads angular js files in order

<script src="runtime.js" type="module"></script>
    -Angular Runtime
<script src="polyfills.js" type="module"></script>
    -browser specific libs
<script src="styles.js" defer></script>
    -css styles are loaded
<script src="vendor.js" type="module"></script>
    -angular framework and thrid party libs and apis

<script src="main.js" type="module"></script>
    -Your app will be loaded

 main.ts(js)
    |
     --->app.module.ts(app.module.js)
            |
            -----app.component.ts(app.component.js)
                     |
                     <app-root> content will be displayed



import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));



@angular - package Name -  private package
core -  sub folder -project
@angular/core 
Any angular apis starts @angular

npm packages are two types

1.private packages
   private packages maintianed by a company
   all private packages starts with @

https://docs.npmjs.com/creating-and-publishing-private-packages

2.public packages
  public packages are maintained by a company or opensource.
  
Angular app by default runs in dev env.
enableProdMode() function which enables default production settings.
...

platformBrowserDynamic()
  It is function which returns object called "PlatformRef"

PlatformRef represents browser.

platformBrowserDynamic().bootstrapModule(AppModule).catch(err=>console.log(err))
   BootStrap angular app into browser.
   catch block will be called if browser fails to load ng app.
.....................................................................................
			Angular Application structure
.....................................................................................

Angular apps are collection of objects 

			    Object
			     |
            ----------------------------------------
            Container                          non Container
               |

Container object contains other other objects including another container- Module Object
Like java packages, package container other packages called sub package.

Container object is other wise called "Module Object".

Modularity In Angular:

Types of modularity in angular

1.ES 6 modules -Physical modularity
   sharing code between files
 export,export default,import..

export class ProductService{}

import {ProductService} from './product.service'

2.Angular modules - Logical modularity
 
 Object contains other objects

    "Every ng app must have one single container module called "app module".

First app module must be loaded, then all sub modules will be loaded.

..................................................................................
			
				Root View/Page


AppComponent.ts

 It is file which creates DOM tree , Which will render first 


import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'my-first-project';
}
..............................................................................................
				Angular Infra Structure Objects
..............................................................................................

Angular infra objects

1.module
2.component
3.service
4.directive
5.pipes

Note : 
  in ng we never create infra object using new keyword
ng depedency injector will create object , we use it.

How to create angular infra objects / How to identify this object is module/component?

Using decorators. Angular provides lot of decorators

Built in decorators
 Component 
 ContentChild 
 ContentChildren
 Directive Host 
 HostBinding
 HostListener
 Inject 
 Injectable 
 Input
 NgModule
 Optional 
 Output 
 Pipe
 Self
 SkipSelf 
 ViewChild 
 ViewChildren

.............................................................................................
				Angular Infra Object - Component
.............................................................................................

What is component?

 Component is Object which represents User interface.

What is difference between normal object and Component?

Any Object has three characteristics

1.state - data
2.identification - identifier
3.behaviour - methods

Angular component also having state,behaviour but it has some extra properties
 =>User interface information called templates

template is collection of html elements and angular instructions.
..............................................................................................

Most of decorator takes parameter , mostly object called "Decorator meta data"

Angular is mvc framework:
m-model
v-view
c-controller - controller is component


@Component({})

How to create component?
Steps: 
1.declare class and export
export class AppComponent{
  
}




import { Component } from "@angular/core";
//Controller 
@Component({
  selector: 'app-root', // custom element
  //where User interface portion is represented
  template: `<div>
                <h1>My First Angular App</h1>
            </div>
  `
})
export class AppComponent {

}
...........................................................................
				App Module

=>It is entry module for any angular app.
=>Root container object 
=>App Module will have instructions that how to create objects- DI patterns

Note:
 In angular we never create objects(infra objects)
 Angular uses a pattern "IOC" /Dependency Injection pattern
 Angular behind the scene uses a program through which only objects are created.

lets assume if you declare a class

export class Hello {

}
do you think that angular will create object for Hello automatically.
 No!
How to teach angular , that create object for this class.

Ans:
  Via Configuration, we have to tell angular 

Where this configuration is mentioned?
 
 Inside any module (main or submodule)

Types of classes/Objects in the angular

1.View Objects
   Component,Directive,Pipe
2.Module(sub Module) Objects
   any class which is decorated with @NgModule
3.Services
   Any class which is decorated with @Injectable

 declarations:[] 
    contains view Objects(Component,Directive,Pipe)
 imports:[],
     contains submodule objects
 providers:[]
     contains service objects

bootstrap:
   which is root object(view object)

....................................................................................
			  App Structure


<div>
   <header></header>
   <footer></footer>
</div>

index.html
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Gettingstarted</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root>
    	<app-header>
		<header></header>
	</app-header>
  </app-root>
</body>
</html>



Steps:
1.create component

import { Component } from "@angular/core";

@Component({
    selector: 'app-header',
    templateUrl: 'header.component.html'
})
export class HeaderComponent {

}
header.component.html
<header>
    <h1>Angular Application Training</h1>
</header>

2.declare component inside main module
import { NgModule } from '@angular/core'
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';
import { HeaderComponent } from './header.component';

@NgModule({
  declarations: [AppComponent,HeaderComponent], //view objects
  imports: [BrowserModule], //sub module objects
  providers: [], //service objects
  bootstrap:[AppComponent]
})
export class AppModule { }

3.Refer the component 
<div>
  <app-header></app-header>
</div>
..............................&&&&&&&&&&&&&&&.......................................





















































