			  Components and Modules
.....................................................................................

Component is Object which represents actual User interface.

Component is Controller in MVC arch, since Angular is MVC framework.

View is Runtime representation of "template".

Template is collection of HTML elements + Angular instructions

Other infra structure objects (Modules,Directives,Pipes,Services) support Component in order to build complete app.

Please have look at picture.
.....................................................................................
Angular App development process:

1.Have blue print of app(user interface)
 like
  Page 
    -header
	search
        logo 
        title
        login
    -footer
    -body
2.Convert this req into HTML prototype

  <body>
	<div>
	   <header>
		<img /> <--Logo-->
	   </header>
	</div> <!--Page-->
  </body>

3.In case if you use frameworks - angular,vue,react.....

Angular : 
   Every UI is represented as component.
The big user interface is broken into "smallar user interface" called "components'
 This process is called "component driven design".

Advantages of component driven design:

1.Reuseablity.
   eg : if you design login component, can be reused inside current app and also other app.

2.Composability
   One dev writes one component ,others can use for composition.
.....................................................................................

Component creation:
..................
Before creating any object we need to follow, code best practices

		 Angular coding best pratices -Angular Style Guide

https://angular.io/guide/styleguide

File structure conventions:

->file must follow the domain model.

product:
 Ng has lot of infra objects (module,component,pipe,services...)

component:
 It has so many files
 .ts file
    component file
    component spec file -  unit testing file
 .html file
 .css file

header.component.ts | spec.ts | .html | .css

header.component.ts
header.component.html
header.component.css
header.component.spec.ts

Modules
 header.module.ts


style guide for file names

domainname.component|service|directive|pipe.ts

hero.component.ts
hero.service.ts
hero.directive.ts
hero.pipe.ts

Custom elements Naming convention:Component selectors

 <app-root> - recommended
  
 <approot>  - not recommended.

Do use dashed-case or kebab-case for naming the element selectors of components.

Should i use always app?
 Not Necessary
app is default prefix, it can be changed - angular.json file

ibm-root
ibm-customer
ibm-product
............................................................................................

class Names:

 1.Noun
 2.should be meaningfull
 3.should have suffix component,service,directive,pipe

 HeaderComponent
 HeaderService
 HeaderDirective
 HeaderPipe
.....................................................................................
				Modularization
....................................................................................

Every angular apps must be modularized.

-es 6 modules
   folders
     -files

-angular modules
    organization of objects

src
  |
  you must have only root files
  app.component.ts
  app.module.ts
 |
 customer
   |
   customer component
   customer module
   customer service
   customer pipe

Use case:
  -header
  -footer
  -body

Component design prototype:

  <body>
	<app-root>
		<app-header></app-header>
	</app-root>
  </body>

Steps to create Component

1.declare componenent class
2.declare component html 
3.write component logic
4.dependency injection inside moudle
5.refer the compoent inside template.

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import { HeaderComponent } from './header/header.component';

@NgModule({
  declarations: [
    AppComponent,HeaderComponent
  ],
  imports: [
    BrowserModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }

import { Component } from "@angular/core";


@Component({
    selector: 'app-header',
    templateUrl:'header.component.html'
})
export class HeaderComponent {

}

app.component.html
<div>
    <app-header></app-header>
</div>

The components we create should not be injected inside root module.- we have to always create sub module and where we have to inject, and that sub module must be injected into main module.

 Object creation order

  app.module.ts----> submodule---->components


src/app/app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppComponent } from './app.component';
import { HeaderModule } from './header/header.module';
// import { HeaderComponent } from './header/header.component';

@NgModule({
  declarations: [
    // AppComponent,HeaderComponent
    AppComponent
  ],
  imports: [
    BrowserModule,HeaderModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


src/header/header.module.ts
import { NgModule } from '@angular/core'
import { HeaderComponent } from './header.component';

@NgModule({
    declarations: [HeaderComponent],
    imports: [],
    providers: []
})
export class HeaderModule {

}
after running this code, still we have error

error: src/app/app.component.html:2:5 - error NG8001: 'app-header' is not a known element:
1. If 'app-header' is an Angular component, then verify that it is part of this module.
2. If 'app-header' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.


Reason:

if you refer, the component from the current module outside module, we cant access, the component is private scope..

How to make it public?

exports:
  options

import { NgModule } from '@angular/core'
import { HeaderComponent } from './header.component';

@NgModule({
    declarations: [HeaderComponent],
    imports: [],
    providers: [],
    exports:[HeaderComponent] //what are the components to be available outside this module
})
export class HeaderModule {

}

Problems in the dev flow:

Tasks:

1.create folder
2.create files - component-ts,html,css,spec
3.create module
4.declare class -cmp,service...
5.refer the classes inside module
6.you need to inject submodule into main module..

DRY

if you repeate the same thing for every object , which increases lot of time.

Automation:
 code generation automation

angular cli tool to generate code.

Generates and/or modifies files based on a schematic.

ng generate <schematic> [options]
ng g <schematic> [options]



Task:
1.create folder
2.create submodule


module:
  --flat
  --module
  --route
  --project
etc...

ng g m footer --module=app
ng g m footer 

create folder called footer
update/inject footer module inside app

create component, inside footer folder, inject into footer module, make it available public

i dont want css file,i want html file,i dont want spec file

ng g c footer/footer  --flat=true --export=true --inline-style=true --skip-tests=true   --module=footer

ng g c footer/footer  --flat=true --export=true  --module=footer


 --flat=true :  create any thing inside exsiting folder
 --export=true : make it public
 --inline-style=true : i dont want css file
 --skip-tests=true  :dont create spec files
 --module=footer  : inject inside footer module

ng g m body --module=app   
ng g c body/body  --flat=true --export=true --inline-style=true --skip-tests=true   --module=body
................................**************......................................



